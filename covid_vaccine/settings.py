"""
Django settings for covid_vaccine project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import codecs
import json
import threading
import time
from pathlib import Path


# Mayank - WinSound works only in windows. This will send a beep of 5 seconds when the empty slot is found
try:
	import winsound
except:
	pass
import requests
from django.core.mail import send_mail

BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Mayank - Setup the secret key! Any random string should work.
SECRET_KEY = ''

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',
]

MIDDLEWARE = [
	'django.middleware.security.SecurityMiddleware',
	'django.contrib.sessions.middleware.SessionMiddleware',
	'django.middleware.common.CommonMiddleware',
	'django.middleware.csrf.CsrfViewMiddleware',
	'django.contrib.auth.middleware.AuthenticationMiddleware',
	'django.contrib.messages.middleware.MessageMiddleware',
	'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'covid_vaccine.urls'

TEMPLATES = [
	{
		'BACKEND': 'django.template.backends.django.DjangoTemplates',
		'DIRS': [],
		'APP_DIRS': True,
		'OPTIONS': {
			'context_processors': [
				'django.template.context_processors.debug',
				'django.template.context_processors.request',
				'django.contrib.auth.context_processors.auth',
				'django.contrib.messages.context_processors.messages',
			],
		},
	},
]

WSGI_APPLICATION = 'covid_vaccine.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
	'default': {
		'ENGINE': 'django.db.backends.sqlite3',
		'NAME': BASE_DIR / 'db.sqlite3',
	}
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
	{
		'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
	},
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'


# Mayank - Would need to setup SMTP in your email for sending email alerts!
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.office365.com'
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = ''
EMAIL_HOST_PASSWORD = ''


class FindVaccineSlot:

	def __init__(self, token, clinics, months):

		self.clinics = clinics
		self.months = months
		self.token = token
		self.duration = 5000  # milliseconds
		self.freq = 440  # Hz

	def check(self):
		for clinic in self.clinics:
			print('Checking', clinic)
			try:
				response = requests.post(
					'https://kawasaki.v-yoyaku.jp/dataapi/monthly_calendar',
					data={
						'_token': self.token,
						'disp_type': 2,
						'start': self.months[0],
						'end': self.months[1],
						'reservation_number': 1,
						'medical_center_cd': clinic['number']
					},
					headers={
						'cookie': 'token_waited=15ef9a798c0-87af772394-42f5eda-702; ck_local_key=eyJpdiI6Ik1pWG50UXczYTIzcUR2MS9aaFJPMXc9PSIsInZhbHVlIjoiSUVlanVVT3ArTnU5SnlIdGhvZS9aUT09IiwibWFjIjoiMmE1ODU3Nzg4NDE1MDFiMjk0YmE4MTU3NDQ2MWI5NzU2ODEzOGUyNjdlNGE2NDcyMzI4NjQxOTQzMDM0MDBiYiJ9; ck_ward_key=eyJpdiI6IjJxYjBIRWFsZ1BrQVh6em1KZlQ5YVE9PSIsInZhbHVlIjoieGo3Vm9XUHFGTmhQV3BJUFlBMXRnZz09IiwibWFjIjoiZTYxYzJjMmJmNDkyMzY4ZDgzOTUzYWE1ZDBmY2E0ZGE0NGJmN2M1OWMxNWFhOTFhZDhhODdiNGJmOTZkMjFlYSJ9; ck_ward_name=eyJpdiI6IkVZM0E3RExPbXJad3JmUnhKcEdmcUE9PSIsInZhbHVlIjoiR0tQSHBFaUgvQ0RtWjBOODBJVjdldz09IiwibWFjIjoiOWU4Y2M0YWE4ODE0MzQyOGJkYzgyMzhkMTFjYWVkZWMwOGJjMTIzODY0MzRiOTI1ZDkwODVmYWUwMTdhNjJlZiJ9; ck_auth_key=eyJpdiI6ImU4Y3VrZlMycndiWU5udmtuQUl2UXc9PSIsInZhbHVlIjoiRENTU0d6aWdsNFBaNWJVU1NGeDE1QT09IiwibWFjIjoiNmI0MGRhNTc3YTYzZTI1MWM5YjVjNjZhOGEzZGE5Y2RkNjk1ZmNmOTkzOTFlZjY3OGIxN2I3ZmEyMzE4ODJiZSJ9; AWSALB=LpHGvqarJpdd/OtreN4VpKwGK1Fxnwy+wlJGjbooVwwXpkCkxEV+c29AIuFD7ozfgmgJsPXMz3f8Fs6Rbw6jQ5NfC1SLx8yhPUtsJLfoDy1FdrFhbZL9/eEX7Uwr; AWSALBCORS=LpHGvqarJpdd/OtreN4VpKwGK1Fxnwy+wlJGjbooVwwXpkCkxEV+c29AIuFD7ozfgmgJsPXMz3f8Fs6Rbw6jQ5NfC1SLx8yhPUtsJLfoDy1FdrFhbZL9/eEX7Uwr; XSRF-TOKEN=eyJpdiI6IlhZVHdGaWtIdWwvNlhISkp2RTMzeUE9PSIsInZhbHVlIjoiM0JvMlJ6aHM4TlJtd0dnQmR2amFhQUxiTHRUWmxiZ0pRUDFvbk5ZeDRXcENxV2xNKysvWWxyRGhaZHhKdkJWaSIsIm1hYyI6IjA5OTJjMzZhYmY0ZmEwZThlMjFjM2NkMmU5ZWE5Y2EyNjkyM2U4ZDlmMDk2NDQ1NzYzMjk1MDkwNjFlYjE1ZmYifQ%3D%3D; _session=eyJpdiI6InlYNGhFeGxoaEM0VkdaV0w2dEJiZWc9PSIsInZhbHVlIjoiSW1neVJRQnByRUMxSzFiRjVLWVFWL25WcFpkcnVBbENOa3lYdTNUaU1vMmFCeWZDeUN2di9ILzF1L0RxNzJvMCIsIm1hYyI6ImM4ZDU2ZmFjZjM1N2NhYmRiMjRlOWMyNTdmNzZiYmZkNjRmN2JjNzJlYWFjYjcwN2Q1YzA3YjlmMzU1M2EwZjUifQ%3D%3D'
					}
				).json()
				for date in response:
					if date['title'] not in ["\u5c71\u306e\u65e5", "\u4f11\u65e5", "\u00d7"]:
						self.email(date['start'], clinic, response)

			except:
				self.email('CRASH!!', {'name': 'CRASH!!', 'number': 'CRASH!!'})
				exit(0)

	def email(self, date, clinic, dump=''):
		try:
			winsound.Beep(self.freq, self.duration)
		except:
			pass
		print(date, clinic)
		with codecs.open('debug.json', mode='w', encoding='utf-8') as f:
			json.dump(dump, f, indent=4)
		send_mail(
			subject=f"Vaccine Slot Open!! {clinic['name']} | {date}",
			message=f"Date: {date}\nClinic: {clinic['name']}",
			from_email=EMAIL_HOST_USER,
			recipient_list=['mayank25031998@gmail.com', 'pragyak412@gmail.com']
		)


def threadRunner():
	finder = FindVaccineSlot(
		token='fSdJ9o3L7QoTgVIA4mr3KvirMi5ZdZNrslPr1p8N',
		clinics=[
			{'name': 'Sakurazaka and still otolaryngology', 'number': '1415510342'},
			{'name': 'Uesugi Clinic', 'number': '1415203526'},
			{'name': 'Kawasaki City Large-scale Inoculation Venue (NEC Tamagawa Renaissance City Hall)',
			 'number': '1409990156'},
			{'name': 'Fujitsu Clinic', 'number': '1415203682'},
		],
		months=['2021-07-26T00:00:00+09:00', '2021-09-06T00:00:00+09:00'],
	)

	while True:
		start = time.time()
		finder.check()
		time.sleep(60 - (time.time() - start))


threading.Thread(target=threadRunner, daemon=True).start()
